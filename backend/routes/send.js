const express = require("express"); const router = express.Router(); const nodemailer = require("nodemailer"); const { getAllEmails, updateEmailStatus, getSmtpConfig, getSettings, getTodayEmailCount } = require("../database/db"); let isCurrentlySending = false; let sendingProgress = { total: 0, sent: 0, failed: 0, current: null }; function delay(ms) { return new Promise(resolve => setTimeout(resolve, ms)); } async function createTransporter() { const smtpConfig = await getSmtpConfig(); if (!smtpConfig) { throw new Error("No SMTP configuration found"); } const transportConfig = { host: smtpConfig.host, port: smtpConfig.port, secure: smtpConfig.port === 465, auth: { user: smtpConfig.user, pass: smtpConfig.pass } }; if (smtpConfig.port === 587 || smtpConfig.port === 25) { transportConfig.requireTLS = true; transportConfig.tls = { rejectUnauthorized: false }; } return nodemailer.createTransport(transportConfig); } async function sendEmailSequentially(customSubject, customHtmlContent) { try { isCurrentlySending = true; const emails = await getAllEmails(); const pendingEmails = emails.filter(email => email.status === "pending"); const settings = await getSettings(); const todayCount = await getTodayEmailCount(); const remainingQuota = settings.max_emails_per_day - todayCount; if (remainingQuota <= 0) { throw new Error("Daily email limit reached"); } const emailsToSend = pendingEmails.slice(0, remainingQuota); sendingProgress = { total: emailsToSend.length, sent: 0, failed: 0, current: null }; if (emailsToSend.length === 0) { isCurrentlySending = false; return { success: true, message: "No pending emails to send" }; } const transporter = await createTransporter(); const defaultSubject = customSubject || "Test Email"; const defaultHtmlContent = customHtmlContent || "<h1>Hello!</h1><p>This is a test email from the Email Sender App.</p>"; for (const emailRecord of emailsToSend) { try { sendingProgress.current = emailRecord.email; const mailOptions = { from: (await getSmtpConfig()).user, to: emailRecord.email, subject: defaultSubject, html: defaultHtmlContent }; await transporter.sendMail(mailOptions); await updateEmailStatus(emailRecord.id, "sent"); sendingProgress.sent++; console.log(`Email sent successfully to: ${emailRecord.email}`); } catch (error) { console.error(`Failed to send email to ${emailRecord.email}:`, error.message); await updateEmailStatus(emailRecord.id, "failed", error.message); sendingProgress.failed++; } if (emailRecord !== emailsToSend[emailsToSend.length - 1]) { await delay(settings.delay_ms); } } isCurrentlySending = false; sendingProgress.current = null; return { success: true, message: `Sending completed. Sent: ${sendingProgress.sent}, Failed: ${sendingProgress.failed}` }; } catch (error) { isCurrentlySending = false; sendingProgress.current = null; throw error; } } router.post("/", async (req, res) => { try { if (isCurrentlySending) { return res.json({ success: false, message: "Email sending is already in progress", progress: sendingProgress }); } const { subject, htmlContent } = req.body; const result = await sendEmailSequentially(subject, htmlContent); res.json(result); } catch (error) { console.error("Error sending emails:", error); res.status(500).json({ error: error.message || "Failed to send emails" }); } }); router.get("/", async (req, res) => { try { if (isCurrentlySending) { return res.json({ success: false, message: "Email sending is already in progress", progress: sendingProgress }); } const result = await sendEmailSequentially(); res.json(result); } catch (error) { console.error("Error sending emails:", error); res.status(500).json({ error: error.message || "Failed to send emails" }); } }); router.get("/status", (req, res) => { res.json({ isCurrentlySending, progress: sendingProgress }); }); router.post("/stop", (req, res) => { if (isCurrentlySending) { isCurrentlySending = false; res.json({ success: true, message: "Email sending stopped" }); } else { res.json({ success: false, message: "No email sending in progress" }); } }); router.post("/reset", async (req, res) => { try { const { updateEmailStatus } = require("../database/db"); const emails = await getAllEmails(); let resetCount = 0; for (const email of emails) { if (email.status === "sent" || email.status === "failed") { await updateEmailStatus(email.id, "pending"); resetCount++; } } res.json({ success: true, message: `Reset ${resetCount} emails to pending status`, resetCount }); } catch (error) { console.error("Error resetting emails:", error); res.status(500).json({ error: "Failed to reset email statuses" }); } }); module.exports = router;
